pipeline {
    agent any

    stages {
        stage('Download and setup Packer cli') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-west-2') {
                sh """
                #!/bin/bash
                wget https://releases.hashicorp.com/packer/1.7.10/packer_1.7.10_linux_amd64.zip
                unzip packer*.zip
                mv packer /var/tmp/packer
                chmod o+x /var/tmp/packer
                """
                }
            }
        }        
        stage('Packer - Build AMI using packer.') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-west-2') {
                sh """
                #!/bin/bash
                set +x
                export AWS_ACCESS_KEY_ID=\$(aws secretsmanager get-secret-value --region us-west-2 --secret-id awscred |jq -r .SecretString | jq -r .AccesskeyID)
                export AWS_SECRET_ACCESS_KEY=\$(aws secretsmanager get-secret-value --region us-west-2 --secret-id awscred |jq -r .SecretString | jq -r .Secretaccesskey)
                set -x
                curl https://gist.githubusercontent.com/i-engy/7c49b918338b9a84c63cc0e988864f08/raw/9167154767c30f4d91c6ff116377f3d8a2b37351/gistfile1.txt -o  image.pkr.hcl
                /var/tmp/packer build image.pkr.hcl
                """
                }
            }
        }
        stage('Get Encryption status of EBS volumes.') {
            steps {
                withAWS(credentials: 'aws-creds', region: 'us-west-2') {
                sh """
                #!/bin/bash
                set +x
                export AWS_ACCESS_KEY_ID=\$(aws secretsmanager get-secret-value --region us-west-2 --secret-id awscred |jq -r .SecretString | jq -r .AccesskeyID)
                export AWS_SECRET_ACCESS_KEY=\$(aws secretsmanager get-secret-value --region us-west-2 --secret-id awscred |jq -r .SecretString | jq -r .Secretaccesskey)
                set -x
                for bucket_name in $(aws s3api list-buckets --query "Buckets[].Name" --output text); do

                    echo ${bucket_name}
                    
                    encryption_info=$(aws s3api get-bucket-encryption \
                        --bucket ${bucket_name} 2>/dev/null)
                        
                    if [[ $? != 0 ]]; then
                        echo " - no-encryption"
                    else
                        echo " - ${encryption_info}"
                    fi
                done

                # Check EBS volumes for encryption.
                aws ec2 describe-volumes --filters Name=encrypted,Values=false | jq '.Volumes[] | .VolumeId ,.Encrypted'

                # Get encryption info of all the snapshots owned by user.
                for snapshot in $(aws ec2 describe-snapshots --region us-east-1 \
                --owner-ids $(aws sts get-caller-identity --query "Account" --output text) \
                --filters Name=status,Values=completed --output table --query 'Snapshots[*].SnapshotId' \
                --output text); do aws ec2 describe-snapshots --region us-east-1 --snapshot-id $snapshot --query 'Snapshots[*].Encrypted';done
                """
                }
            }
        }        
    }
}